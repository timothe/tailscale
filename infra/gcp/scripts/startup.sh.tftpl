#!/usr/bin/env bash
set -euxo pipefail

# Inputs from metadata via templatefile
TS_AUTHKEY="${ts_authkey}"
VPC_CIDR="${vpc_cidr}"
HOSTNAME="${hostname}"

# Base packages
export DEBIAN_FRONTEND=noninteractive
apt-get update -y
apt-get install -y curl gnupg lsb-release python3 iproute2 iptables

# Install Tailscale
curl -fsSL https://tailscale.com/install.sh | sh
hostnamectl set-hostname "$HOSTNAME"

# Enable IPv4 forwarding and relax RP filter for asymmetric routing cases
cat >/etc/sysctl.d/99-ts-router.conf <<EOF
net.ipv4.ip_forward=1
net.ipv4.conf.all.rp_filter=0
net.ipv4.conf.default.rp_filter=0
EOF
sysctl --system

# SNAT traffic from Tailnet into VPC so replies work reliably
IFACE="$(ip route show default | awk '/default/ {print $5}' || true)"
iptables -t nat -A POSTROUTING -o "$IFACE" -j MASQUERADE

# Start Tailscale with SSH and subnet routing
TS_AUTHKEY="$TS_AUTHKEY" tailscale up \
  --ssh=true \
  --advertise-routes="$VPC_CIDR" \
  --hostname="$HOSTNAME"

# Create demo user for Tailscale SSH (no password, in sudo group)
if ! id -u tsadmin >/dev/null 2>&1; then
  adduser --disabled-password --gecos "" tsadmin
  usermod -aG sudo tsadmin
  chsh -s /bin/bash tsadmin
fi

# Choose a stable private IP inside the VPC CIDR for a dummy host
DUMMY_IP="$(python3 - <<'PY'
import ipaddress
cidr = "${vpc_cidr}"
net = ipaddress.ip_network(cidr, strict=False)
hosts = list(net.hosts())
pick = hosts[9] if len(hosts) > 10 else hosts[0]
print(str(pick))
PY
)"
echo "$DUMMY_IP" >/var/log/ts-router-dummy-ip.log

# Create dummy interface with that IP and bind a tiny HTTP server to it
modprobe dummy || true
ip link add dummy0 type dummy || true
ip addr add "$DUMMY_IP/32" dev dummy0 || true
ip link set dummy0 up

cat >/etc/systemd/system/dummy-http.service <<EOF
[Unit]
Description=Dummy HTTP service on $DUMMY_IP:8080
After=network-online.target
Wants=network-online.target

[Service]
Environment=DUMMY_IP=$DUMMY_IP
ExecStart=/usr/bin/python3 -m http.server 8080 --bind $DUMMY_IP
Restart=always
RestartSec=2

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable --now dummy-http.service
